@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryDoors {
- {static} allDoors : Door[]
+ {static} makeDoors()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

DirectoryDoors --> "*" Door : "allDoors"

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
}

class Space extends Area{
-doors : Door[]
+getSpaces() : Space[]
+getDoorsGivingAccess() : Door[]
+findAreaById(id : String) : Area
}

class Partition extends Area{
+getSpaces() : Space[]
+getDoorsGivingAccess() : Door[]
+findAreaById(id : String) : Area
}


package "doorstates" {
abstract class DoorState{
# door: Door
#name : String
+DoorState(door : door)
+open()
+close()
+lock()
+unlock()
}

class Locked extends DoorState{
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
}

class Unlocked extends DoorState{
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
}

class States{
+LOCKED : String
+UNLOCKED : String
}

class Actions{
+LOCK : String
+UNLOCK : String
+OPEN : String
+ CLOSE : String
}
}

class DirectoryAreas{
-rootArea : Area
-allDoors : Door[]
+makeAreas()
+findAreaById(id : String) : Area
+findDoorById(id : String) : Door
+getAllDoors() : Door[]
}




class User {
- name : String
- credential : String
+ User(name: String, credential: String)
+ toString() : String
+ canBeInSpace(sp : Space) : boolean
- getSpaces() : Space[]
}

abstract Class Area{
+{abstract}getSpaces() : Space[]
+{abstract}getDoorsGivingAccess() : Door[]
+{abstract}findAreaById(id : String) : Area
}


class Main {
+ {static} main(args : String)
}

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryDoors
DirectoryDoors -[hidden]right- DirectoryUsers


Door --> " 1" DoorState : state
Door -> "1" Space : fromSpace
Door -> "1" Space : toSpace
Space "1" *-left- "*" Door : doors
User -> "*" Area
Partition "1" *-- "*" Area : spaces
DirectoryAreas -down-> "1" Area : rootArea

@enduml
