@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryDoors {
- {static} allDoors : Door[]
+ {static} makeDoors()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

class Door {
- id : String
- closed : boolean
- fromSpace : Space
- toSpace : Space
+ Door(id : String, fromSpace : Space, toSpace : Space)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
+ getFromSpace() : Space
+ getToSpace() : Space
}

class Space extends Area{
-doors : Door[]
+Space(id : String, parentPartition : Partition)
+getSpaces() : Space[]
+getDoorsGivingAccess() : Door[]
+findAreaById(id : String) : Area
+addDoor(door : Door)
}

class Partition extends Area{
-areas : Area[]
+Partition(id : String, parentPartition : Partition)
+getSpaces() : Space[]
+getDoorsGivingAccess() : Door[]
+findAreaById(id : String) : Area
+addArea(area : Area)
}


package "doorstates" {
abstract class DoorState{
# door: Door
#name : String
+DoorState(door : door)
+open()
+close()
+lock()
+unlock()
}

class Locked extends DoorState{
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
}

class Unlocked extends DoorState{
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
}

class States{
+LOCKED : String
+UNLOCKED : String
}

class Actions{
+LOCK : String
+UNLOCK : String
+OPEN : String
+ CLOSE : String
}
}

class DirectoryAreas{
-rootArea : Area
-allDoors : Door[]
-allAreas : Area[]
+makeAreas()
+findAreaById(id : String) : Area
+findDoorById(id : String) : Door
+getAllDoors() : Door[]
+addDoor(door : Door)
}




class User {
- name : String
- credential : String
-spaces : Space[]
+ User(name: String, credential: String)
+ toString() : String
+ canBeInSpace(sp : Space) : boolean
}

abstract Class Area{
#id : String
#parentPartition : Partition
+Area(id : String, parentPartition : Partition)
+{abstract}getSpaces() : Space[]
+{abstract}getDoorsGivingAccess() : Door[]
+findAreaById(id : String) : Area
}

class DirectoryUserGroups {
- {static} userGroup: UserGroup[]
+ {static} makeUserGroups()
+ {static} findUserByCredential(credential : String) : User
}

class UserGroup {
- name : String
- actions : String[]
+ UserGroup(name : String, actions : String[], users : User[],
 availableAreas : Area[], schedules : Schedule[])
+ checkAllowedDateTime(now : LocalDateTime) : boolean
}

class Schedule {
- fromDate : LocalDate
- toDate : LocalDate
- fromHour : LocalTime
- toHour : LocalTime
- weekdays : DayOfWeek[]
+ Schedule(fromDate : LocalDate, toDate : LocalDate,
 fromHour : LocalTime, toHour : LocalTime, weekdays : Set<DayOfWeek>)
+ allowedDateTime(now : LocalDateTime) : boolean
- checkDate(now : LocalDate) : boolean
- checkTime(now : LocalTime) : boolean
}

class Main {
+ {static} main(args : String)
}

note right of Main::main
DirectoryDoors.makeDoors()
DiretoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryDoors
DirectoryDoors -[hidden]right- DirectoryUsers

Door --> " 1" DoorState : state
Door -> "1" Space : fromSpace
Door -> "1" Space : toSpace
Space "1" *-- "*" Door : doors
'User -> "*" Area
Partition "1" *-- "*" Area : spaces
DirectoryAreas --> "1" Area : rootArea
'DirectoryUsers --> "*" User : "users"
DirectoryUserGroups o--> "1..*" UserGroup : userGroups
UserGroup "1\nuserGroup" *--> "users\n*" User
DirectoryDoors --> "*" Door : "allDoors"
UserGroup o--> "*" Area : availableAreas
UserGroup --> "1" Schedule : schedule

@enduml
